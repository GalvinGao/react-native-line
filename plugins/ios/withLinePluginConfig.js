const { withAppDelegate, withInfoPlist } = require('@expo/config-plugins');

const withAppDelegateMod = (config, { channelId }) => {
  return withAppDelegate(
    config,
    async (config) => {
      console.log(config)
      const appDelegate = config.modResults;

      const contents = appDelegate.contents;
      // this is the code generated by React native inside didFinishLaunchingWithOptions function; it might change in the future, look for your own anchor then
      const injectionIndex = contents.indexOf('self.initialProps = @{};');

      // console.log('withAppDelegateMod')
      // console.log(contents)
      // console.log(injectionIndex)

      appDelegate.contents =
        contents.substring(0, injectionIndex) +
        `\n [LineLogin setupWithChannelID:@${channelId} universalLinkURL:nil]; \n` +
        contents.substring(injectionIndex);

      return config;
    }
  );
};


function addLineLoginCode(appDelegate) {
  if (appDelegate.language === 'objc') {
    // Ensure the import statement is present
    if (!appDelegate.contents.includes('#import "RNLine-Swift.h"')) {
      appDelegate.contents = `#import "RNLine-Swift.h"\n` + appDelegate.contents;
    }

    // Inject the `didFinishLaunchingWithOptions` method if it doesn't exist or modify it
    if (!appDelegate.contents.includes('[LineLogin setupWithChannelID')) {
      const didFinishLaunchingCode = `
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    [LineLogin setupWithChannelID:@"YOUR_CHANNEL_ID" universalLinkURL:nil];
    return YES;
}
`;
      appDelegate.contents = appDelegate.contents.replace(
        '- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions',
        didFinishLaunchingCode
      );
    }

    // Inject the URL handling methods
    const urlHandlingMethods = `
- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [LineLogin application:app open:url options:options];
}

- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler
{
  BOOL handledLine = [LineLogin application:application continue:userActivity restorationHandler:restorationHandler];
  return handledLine;
}
`;

    if (!appDelegate.contents.includes('[LineLogin application:')) {
      appDelegate.contents += urlHandlingMethods;
    }
  }

  return appDelegate;
}

const withLineLogin = (config, props) => {
  config = withAppDelegateMod(config, props)
  // config = withAppDelegate(config, (config) => {
  //   config.modResults = addLineLoginCode(config.modResults);
  //   return config;
  // });
  //
  // // Optionally, modify Info.plist if needed
  return config;
};

module.exports = { withLineLogin };
